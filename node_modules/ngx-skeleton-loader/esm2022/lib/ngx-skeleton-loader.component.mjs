import { Component, Input, isDevMode, ChangeDetectionStrategy, Optional, Inject, } from '@angular/core';
import { NGX_SKELETON_LOADER_CONFIG, } from './ngx-skeleton-loader-config.types';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
class NgxSkeletonLoaderComponent {
    constructor(config) {
        this.config = config;
        const { appearance = 'line', animation = 'progress', theme = null, loadingText = 'Loading...', count = 1, ariaLabel = 'loading', } = config || {};
        this.appearance = appearance;
        this.animation = animation;
        this.theme = theme;
        this.loadingText = loadingText;
        this.count = count;
        this.items = [];
        this.ariaLabel = ariaLabel;
    }
    ngOnInit() {
        this.validateInputValues();
    }
    validateInputValues() {
        // Checking if it's receiving a numeric value (string having ONLY numbers or if it's a number)
        if (!/^\d+$/.test(`${this.count}`)) {
            // Shows error message only in Development
            if (isDevMode()) {
                console.error(`\`NgxSkeletonLoaderComponent\` need to receive 'count' a numeric value. Forcing default to "1".`);
            }
            this.count = 1;
        }
        //Force count to 1 when custom-content is used
        if (this.appearance === 'custom-content') {
            // Shows error message only in Development
            if (isDevMode() && this.count !== 1) {
                console.error(`\`NgxSkeletonLoaderComponent\` enforces elements with "custom-content" appearance as DOM nodes. Forcing "count" to "1".`);
                this.count = 1;
            }
        }
        this.items.length = this.count;
        const allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];
        if (allowedAnimations.indexOf(String(this.animation)) === -1) {
            // Shows error message only in Development
            if (isDevMode()) {
                console.error(`\`NgxSkeletonLoaderComponent\` need to receive 'animation' as: ${allowedAnimations.join(', ')}. Forcing default to "progress".`);
            }
            this.animation = 'progress';
        }
        if (['circle', 'line', 'custom-content', ''].indexOf(String(this.appearance)) === -1) {
            // Shows error message only in Development
            if (isDevMode()) {
                console.error(`\`NgxSkeletonLoaderComponent\` need to receive 'appearance' as: circle or line or custom-content or empty string. Forcing default to "''".`);
            }
            this.appearance = '';
        }
        // This code is not using optional chaining since it's only supported on Angular CLI v12
        //  - more details in this comment https://github.com/angular/angular-cli/issues/20471#issuecomment-815599616
        // Which raises issues on the consumer's side. E.G: https://github.com/willmendesneto/ngx-skeleton-loader/issues/150#issuecomment-1638612329
        const { theme } = this.config || {};
        if (!!theme && !!theme.extendsFromRoot && this.theme !== null) {
            // Shows error message only in Development
            this.theme = { ...this.config.theme, ...this.theme };
        }
    }
    ngOnChanges(changes) {
        // Avoiding multiple calls for the same input in case there's no changes in the fields
        // Checking if the fields that require validation are available and if they were changed
        // In case were not changed, we stop the function. Otherwise, `validateInputValues` will be called.
        if (['count', 'animation', 'appearance'].find(key => changes[key] && (changes[key].isFirstChange() || changes[key].previousValue === changes[key].currentValue))) {
            return;
        }
        this.validateInputValues();
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: NgxSkeletonLoaderComponent, deps: [{ token: NGX_SKELETON_LOADER_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }
    /** @nocollapse */ static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: NgxSkeletonLoaderComponent, selector: "ngx-skeleton-loader", inputs: { count: "count", loadingText: "loadingText", appearance: "appearance", animation: "animation", ariaLabel: "ariaLabel", theme: "theme" }, usesOnChanges: true, ngImport: i0, template: "<div\n  *ngFor=\"let item of items\"\n  class=\"skeleton-loader\"\n  [attr.aria-label]=\"ariaLabel\"\n  aria-busy=\"true\"\n  aria-valuemin=\"0\"\n  aria-valuemax=\"100\"\n  [attr.aria-valuetext]=\"loadingText\"\n  role=\"progressbar\"\n  tabindex=\"-1\"\n  [ngClass]=\"{\n    'custom-content': appearance === 'custom-content',\n    circle: appearance === 'circle',\n    progress: animation === 'progress',\n    'progress-dark': animation === 'progress-dark',\n    pulse: animation === 'pulse'\n  }\"\n  [ngStyle]=\"theme\"\n>\n  <ng-content *ngIf=\"appearance  === 'custom-content'\"></ng-content>\n</div>\n", styles: [".skeleton-loader{box-sizing:border-box;overflow:hidden;position:relative;background:rgb(239,241,246) no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.skeleton-loader:after,.skeleton-loader:before{box-sizing:border-box}.skeleton-loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.skeleton-loader.progress,.skeleton-loader.progress-dark{transform:translateZ(0)}.skeleton-loader.progress:after,.skeleton-loader.progress:before,.skeleton-loader.progress-dark:after,.skeleton-loader.progress-dark:before{box-sizing:border-box}.skeleton-loader.progress:before,.skeleton-loader.progress-dark:before{animation:progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:\"\"}.skeleton-loader.progress:before{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.skeleton-loader.progress-dark:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.skeleton-loader.pulse{animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation-delay:.5s}.skeleton-loader.custom-content{height:100%;background:none}@media (prefers-reduced-motion: reduce){.skeleton-loader.pulse,.skeleton-loader.progress-dark,.skeleton-loader.custom-content,.skeleton-loader.progress:before{animation:none}.skeleton-loader.progress:before,.skeleton-loader.progress-dark,.skeleton-loader.custom-content{background-image:none}}@media screen and (min-device-width: 1200px){.skeleton-loader{-webkit-user-select:none;user-select:none;cursor:wait}}@keyframes progress{0%{transform:translate3d(-200px,0,0)}to{transform:translate3d(calc(200px + 100vw),0,0)}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { NgxSkeletonLoaderComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: NgxSkeletonLoaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-skeleton-loader', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  *ngFor=\"let item of items\"\n  class=\"skeleton-loader\"\n  [attr.aria-label]=\"ariaLabel\"\n  aria-busy=\"true\"\n  aria-valuemin=\"0\"\n  aria-valuemax=\"100\"\n  [attr.aria-valuetext]=\"loadingText\"\n  role=\"progressbar\"\n  tabindex=\"-1\"\n  [ngClass]=\"{\n    'custom-content': appearance === 'custom-content',\n    circle: appearance === 'circle',\n    progress: animation === 'progress',\n    'progress-dark': animation === 'progress-dark',\n    pulse: animation === 'pulse'\n  }\"\n  [ngStyle]=\"theme\"\n>\n  <ng-content *ngIf=\"appearance  === 'custom-content'\"></ng-content>\n</div>\n", styles: [".skeleton-loader{box-sizing:border-box;overflow:hidden;position:relative;background:rgb(239,241,246) no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.skeleton-loader:after,.skeleton-loader:before{box-sizing:border-box}.skeleton-loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.skeleton-loader.progress,.skeleton-loader.progress-dark{transform:translateZ(0)}.skeleton-loader.progress:after,.skeleton-loader.progress:before,.skeleton-loader.progress-dark:after,.skeleton-loader.progress-dark:before{box-sizing:border-box}.skeleton-loader.progress:before,.skeleton-loader.progress-dark:before{animation:progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:\"\"}.skeleton-loader.progress:before{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.skeleton-loader.progress-dark:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.skeleton-loader.pulse{animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation-delay:.5s}.skeleton-loader.custom-content{height:100%;background:none}@media (prefers-reduced-motion: reduce){.skeleton-loader.pulse,.skeleton-loader.progress-dark,.skeleton-loader.custom-content,.skeleton-loader.progress:before{animation:none}.skeleton-loader.progress:before,.skeleton-loader.progress-dark,.skeleton-loader.custom-content{background-image:none}}@media screen and (min-device-width: 1200px){.skeleton-loader{-webkit-user-select:none;user-select:none;cursor:wait}}@keyframes progress{0%{transform:translate3d(-200px,0,0)}to{transform:translate3d(calc(200px + 100vw),0,0)}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_SKELETON_LOADER_CONFIG]
                }, {
                    type: Optional
                }] }]; }, propDecorators: { count: [{
                type: Input
            }], loadingText: [{
                type: Input
            }], appearance: [{
                type: Input
            }], animation: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], theme: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNrZWxldG9uLWxvYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2tlbGV0b24tbG9hZGVyL3NyYy9saWIvbmd4LXNrZWxldG9uLWxvYWRlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2tlbGV0b24tbG9hZGVyL3NyYy9saWIvbmd4LXNrZWxldG9uLWxvYWRlci5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsS0FBSyxFQUNMLFNBQVMsRUFDVCx1QkFBdUIsRUFHdkIsUUFBUSxFQUNSLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBR0wsMEJBQTBCLEdBQzNCLE1BQU0sb0NBQW9DLENBQUM7OztBQUU1QyxNQU1hLDBCQUEwQjtJQXdCckMsWUFBb0UsTUFBZ0M7UUFBaEMsV0FBTSxHQUFOLE1BQU0sQ0FBMEI7UUFDbEcsTUFBTSxFQUNKLFVBQVUsR0FBRyxNQUFNLEVBQ25CLFNBQVMsR0FBRyxVQUFVLEVBQ3RCLEtBQUssR0FBRyxJQUFJLEVBQ1osV0FBVyxHQUFHLFlBQVksRUFDMUIsS0FBSyxHQUFHLENBQUMsRUFDVCxTQUFTLEdBQUcsU0FBUyxHQUN0QixHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUM7UUFFakIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJ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aUlBdEhVLDBCQUEwQixrQkF3QmpCLDBCQUEwQjtxSEF4Qm5DLDBCQUEwQixrT0N2QnZDLGttQkFxQkE7O1NERWEsMEJBQTBCOzJGQUExQiwwQkFBMEI7a0JBTnRDLFNBQVM7K0JBQ0UscUJBQXFCLG1CQUdkLHVCQUF1QixDQUFDLE1BQU07OzBCQTBCbEMsTUFBTTsyQkFBQywwQkFBMEI7OzBCQUFHLFFBQVE7NENBbkJ6RCxLQUFLO3NCQURKLEtBQUs7Z0JBSU4sV0FBVztzQkFEVixLQUFLO2dCQUlOLFVBQVU7c0JBRFQsS0FBSztnQkFJTixTQUFTO3NCQURSLEtBQUs7Z0JBSU4sU0FBUztzQkFEUixLQUFLO2dCQUlOLEtBQUs7c0JBREosS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBJbnB1dCxcbiAgaXNEZXZNb2RlLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBPcHRpb25hbCxcbiAgSW5qZWN0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIE5neFNrZWxldG9uTG9hZGVyQ29uZmlnLFxuICBOZ3hTa2VsZXRvbkxvYWRlckNvbmZpZ1RoZW1lLFxuICBOR1hfU0tFTEVUT05fTE9BREVSX0NPTkZJRyxcbn0gZnJvbSAnLi9uZ3gtc2tlbGV0b24tbG9hZGVyLWNvbmZpZy50eXBlcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1za2VsZXRvbi1sb2FkZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vbmd4LXNrZWxldG9uLWxvYWRlci5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbmd4LXNrZWxldG9uLWxvYWRlci5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hTa2VsZXRvbkxvYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX2NvdW50OiBudW1iZXIgfCBzdHJpbmc7XG4gIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9hbmltYXRpb246IGJvb2xlYW4gfCBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgY291bnQ6IE5neFNrZWxldG9uTG9hZGVyQ29uZmlnWydjb3VudCddO1xuXG4gIEBJbnB1dCgpXG4gIGxvYWRpbmdUZXh0OiBOZ3hTa2VsZXRvbkxvYWRlckNvbmZpZ1snbG9hZGluZ1RleHQnXTtcblxuICBASW5wdXQoKVxuICBhcHBlYXJhbmNlOiBOZ3hTa2VsZXRvbkxvYWRlckNvbmZpZ1snYXBwZWFyYW5jZSddO1xuXG4gIEBJbnB1dCgpXG4gIGFuaW1hdGlvbjogTmd4U2tlbGV0b25Mb2FkZXJDb25maWdbJ2FuaW1hdGlvbiddO1xuXG4gIEBJbnB1dCgpXG4gIGFyaWFMYWJlbDogTmd4U2tlbGV0b25Mb2FkZXJDb25maWdbJ2FyaWFMYWJlbCddO1xuXG4gIEBJbnB1dCgpXG4gIHRoZW1lOiBOZ3hTa2VsZXRvbkxvYWRlckNvbmZpZ1RoZW1lO1xuXG4gIGl0ZW1zOiBBcnJheTxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoTkdYX1NLRUxFVE9OX0xPQURFUl9DT05GSUcpIEBPcHRpb25hbCgpIHByaXZhdGUgY29uZmlnPzogTmd4U2tlbGV0b25Mb2FkZXJDb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICBhcHBlYXJhbmNlID0gJ2xpbmUnLFxuICAgICAgYW5pbWF0aW9uID0gJ3Byb2dyZXNzJyxcbiAgICAgIHRoZW1lID0gbnVsbCxcbiAgICAgIGxvYWRpbmdUZXh0ID0gJ0xvYWRpbmcuLi4nLFxuICAgICAgY291bnQgPSAxLFxuICAgICAgYXJpYUxhYmVsID0gJ2xvYWRpbmcnLFxuICAgIH0gPSBjb25maWcgfHwge307XG5cbiAgICB0aGlzLmFwcGVhcmFuY2UgPSBhcHBlYXJhbmNlO1xuICAgIHRoaXMuYW5pbWF0aW9uID0gYW5pbWF0aW9uO1xuICAgIHRoaXMudGhlbWUgPSB0aGVtZTtcbiAgICB0aGlzLmxvYWRpbmdUZXh0ID0gbG9hZGluZ1RleHQ7XG4gICAgdGhpcy5jb3VudCA9IGNvdW50O1xuICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICB0aGlzLmFyaWFMYWJlbCA9IGFyaWFMYWJlbDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudmFsaWRhdGVJbnB1dFZhbHVlcygpO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZUlucHV0VmFsdWVzKCkge1xuICAgIC8vIENoZWNraW5nIGlmIGl0J3MgcmVjZWl2aW5nIGEgbnVtZXJpYyB2YWx1ZSAoc3RyaW5nIGhhdmluZyBPTkxZIG51bWJlcnMgb3IgaWYgaXQncyBhIG51bWJlcilcbiAgICBpZiAoIS9eXFxkKyQvLnRlc3QoYCR7dGhpcy5jb3VudH1gKSkge1xuICAgICAgLy8gU2hvd3MgZXJyb3IgbWVzc2FnZSBvbmx5IGluIERldmVsb3BtZW50XG4gICAgICBpZiAoaXNEZXZNb2RlKCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBgXFxgTmd4U2tlbGV0b25Mb2FkZXJDb21wb25lbnRcXGAgbmVlZCB0byByZWNlaXZlICdjb3VudCcgYSBudW1lcmljIHZhbHVlLiBGb3JjaW5nIGRlZmF1bHQgdG8gXCIxXCIuYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY291bnQgPSAxO1xuICAgIH1cblxuICAgIC8vRm9yY2UgY291bnQgdG8gMSB3aGVuIGN1c3RvbS1jb250ZW50IGlzIHVzZWRcbiAgICBpZiAodGhpcy5hcHBlYXJhbmNlID09PSAnY3VzdG9tLWNvbnRlbnQnKSB7XG4gICAgICAvLyBTaG93cyBlcnJvciBtZXNzYWdlIG9ubHkgaW4gRGV2ZWxvcG1lbnRcbiAgICAgIGlmIChpc0Rldk1vZGUoKSAmJiB0aGlzLmNvdW50ICE9PSAxKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYFxcYE5neFNrZWxldG9uTG9hZGVyQ29tcG9uZW50XFxgIGVuZm9yY2VzIGVsZW1lbnRzIHdpdGggXCJjdXN0b20tY29udGVudFwiIGFwcGVhcmFuY2UgYXMgRE9NIG5vZGVzLiBGb3JjaW5nIFwiY291bnRcIiB0byBcIjFcIi5gLFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmNvdW50ID0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5pdGVtcy5sZW5ndGggPSB0aGlzLmNvdW50O1xuXG4gICAgY29uc3QgYWxsb3dlZEFuaW1hdGlvbnMgPSBbJ3Byb2dyZXNzJywgJ3Byb2dyZXNzLWRhcmsnLCAncHVsc2UnLCAnZmFsc2UnXTtcbiAgICBpZiAoYWxsb3dlZEFuaW1hdGlvbnMuaW5kZXhPZihTdHJpbmcodGhpcy5hbmltYXRpb24pKSA9PT0gLTEpIHtcbiAgICAgIC8vIFNob3dzIGVycm9yIG1lc3NhZ2Ugb25seSBpbiBEZXZlbG9wbWVudFxuICAgICAgaWYgKGlzRGV2TW9kZSgpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYFxcYE5neFNrZWxldG9uTG9hZGVyQ29tcG9uZW50XFxgIG5lZWQgdG8gcmVjZWl2ZSAnYW5pbWF0aW9uJyBhczogJHthbGxvd2VkQW5pbWF0aW9ucy5qb2luKFxuICAgICAgICAgICAgJywgJyxcbiAgICAgICAgICApfS4gRm9yY2luZyBkZWZhdWx0IHRvIFwicHJvZ3Jlc3NcIi5gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhpcy5hbmltYXRpb24gPSAncHJvZ3Jlc3MnO1xuICAgIH1cblxuICAgIGlmIChbJ2NpcmNsZScsICdsaW5lJywgJ2N1c3RvbS1jb250ZW50JywgJyddLmluZGV4T2YoU3RyaW5nKHRoaXMuYXBwZWFyYW5jZSkpID09PSAtMSkge1xuICAgICAgLy8gU2hvd3MgZXJyb3IgbWVzc2FnZSBvbmx5IGluIERldmVsb3BtZW50XG4gICAgICBpZiAoaXNEZXZNb2RlKCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBgXFxgTmd4U2tlbGV0b25Mb2FkZXJDb21wb25lbnRcXGAgbmVlZCB0byByZWNlaXZlICdhcHBlYXJhbmNlJyBhczogY2lyY2xlIG9yIGxpbmUgb3IgY3VzdG9tLWNvbnRlbnQgb3IgZW1wdHkgc3RyaW5nLiBGb3JjaW5nIGRlZmF1bHQgdG8gXCInJ1wiLmAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLmFwcGVhcmFuY2UgPSAnJztcbiAgICB9XG5cbiAgICAvLyBUaGlzIGNvZGUgaXMgbm90IHVzaW5nIG9wdGlvbmFsIGNoYWluaW5nIHNpbmNlIGl0J3Mgb25seSBzdXBwb3J0ZWQgb24gQW5ndWxhciBDTEkgdjEyXG4gICAgLy8gIC0gbW9yZSBkZXRhaWxzIGluIHRoaXMgY29tbWVudCBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLWNsaS9pc3N1ZXMvMjA0NzEjaXNzdWVjb21tZW50LTgxNTU5OTYxNlxuICAgIC8vIFdoaWNoIHJhaXNlcyBpc3N1ZXMgb24gdGhlIGNvbnN1bWVyJ3Mgc2lkZS4gRS5HOiBodHRwczovL2dpdGh1Yi5jb20vd2lsbG1lbmRlc25ldG8vbmd4LXNrZWxldG9uLWxvYWRlci9pc3N1ZXMvMTUwI2lzc3VlY29tbWVudC0xNjM4NjEyMzI5XG4gICAgY29uc3QgeyB0aGVtZSB9ID0gdGhpcy5jb25maWcgfHwge307XG4gICAgaWYgKCEhdGhlbWUgJiYgISF0aGVtZS5leHRlbmRzRnJvbVJvb3QgJiYgdGhpcy50aGVtZSAhPT0gbnVsbCkge1xuICAgICAgLy8gU2hvd3MgZXJyb3IgbWVzc2FnZSBvbmx5IGluIERldmVsb3BtZW50XG4gICAgICB0aGlzLnRoZW1lID0geyAuLi50aGlzLmNvbmZpZyEudGhlbWUsIC4uLnRoaXMudGhlbWUgfTtcbiAgICB9XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgLy8gQXZvaWRpbmcgbXVsdGlwbGUgY2FsbHMgZm9yIHRoZSBzYW1lIGlucHV0IGluIGNhc2UgdGhlcmUncyBubyBjaGFuZ2VzIGluIHRoZSBmaWVsZHNcbiAgICAvLyBDaGVja2luZyBpZiB0aGUgZmllbGRzIHRoYXQgcmVxdWlyZSB2YWxpZGF0aW9uIGFyZSBhdmFpbGFibGUgYW5kIGlmIHRoZXkgd2VyZSBjaGFuZ2VkXG4gICAgLy8gSW4gY2FzZSB3ZXJlIG5vdCBjaGFuZ2VkLCB3ZSBzdG9wIHRoZSBmdW5jdGlvbi4gT3RoZXJ3aXNlLCBgdmFsaWRhdGVJbnB1dFZhbHVlc2Agd2lsbCBiZSBjYWxsZWQuXG4gICAgaWYgKFxuICAgICAgWydjb3VudCcsICdhbmltYXRpb24nLCAnYXBwZWFyYW5jZSddLmZpbmQoXG4gICAgICAgIGtleSA9PlxuICAgICAgICAgIGNoYW5nZXNba2V5XSAmJiAoY2hhbmdlc1trZXldLmlzRmlyc3RDaGFuZ2UoKSB8fCBjaGFuZ2VzW2tleV0ucHJldmlvdXNWYWx1ZSA9PT0gY2hhbmdlc1trZXldLmN1cnJlbnRWYWx1ZSksXG4gICAgICApXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy52YWxpZGF0ZUlucHV0VmFsdWVzKCk7XG4gIH1cbn1cbiIsIjxkaXZcbiAgKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXNcIlxuICBjbGFzcz1cInNrZWxldG9uLWxvYWRlclwiXG4gIFthdHRyLmFyaWEtbGFiZWxdPVwiYXJpYUxhYmVsXCJcbiAgYXJpYS1idXN5PVwidHJ1ZVwiXG4gIGFyaWEtdmFsdWVtaW49XCIwXCJcbiAgYXJpYS12YWx1ZW1heD1cIjEwMFwiXG4gIFthdHRyLmFyaWEtdmFsdWV0ZXh0XT1cImxvYWRpbmdUZXh0XCJcbiAgcm9sZT1cInByb2dyZXNzYmFyXCJcbiAgdGFiaW5kZXg9XCItMVwiXG4gIFtuZ0NsYXNzXT1cIntcbiAgICAnY3VzdG9tLWNvbnRlbnQnOiBhcHBlYXJhbmNlID09PSAnY3VzdG9tLWNvbnRlbnQnLFxuICAgIGNpcmNsZTogYXBwZWFyYW5jZSA9PT0gJ2NpcmNsZScsXG4gICAgcHJvZ3Jlc3M6IGFuaW1hdGlvbiA9PT0gJ3Byb2dyZXNzJyxcbiAgICAncHJvZ3Jlc3MtZGFyayc6IGFuaW1hdGlvbiA9PT0gJ3Byb2dyZXNzLWRhcmsnLFxuICAgIHB1bHNlOiBhbmltYXRpb24gPT09ICdwdWxzZSdcbiAgfVwiXG4gIFtuZ1N0eWxlXT1cInRoZW1lXCJcbj5cbiAgPG5nLWNvbnRlbnQgKm5nSWY9XCJhcHBlYXJhbmNlICA9PT0gJ2N1c3RvbS1jb250ZW50J1wiPjwvbmctY29udGVudD5cbjwvZGl2PlxuIl19